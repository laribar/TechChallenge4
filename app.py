import streamlit as st
import pandas as pd
import joblib
import numpy as np

# Inicializa estado da sess√£o
if "resultado_exibido" not in st.session_state:
    st.session_state.resultado_exibido = False
    st.session_state.resultado = None

# Carregar modelo, scaler, label encoder e colunas
modelo = joblib.load("modelo_final.pkl")
scaler = joblib.load("scaler.pkl")
label_encoder = joblib.load("label_encoder.pkl")
feature_columns = joblib.load("feature_columns.pkl")

st.title("üîç Preditor Personalizado de Obesidade")
st.write("Responda √†s perguntas abaixo para prever seu n√≠vel de obesidade com base em h√°bitos, alimenta√ß√£o e sa√∫de.")

# Perguntas do question√°rio
genero = st.selectbox("Qual seu g√™nero?", ["Feminino", "Masculino"])
idade = st.slider("Qual sua idade?", 10, 100, 25)
altura = st.slider("Qual sua altura (em metros)?", 1.0, 2.5, 1.70)
peso = st.slider("Qual seu peso (em kg)?", 30.0, 200.0, 70.0)
historico_familiar = st.radio("Voc√™ tem hist√≥rico familiar de sobrepeso?", ["Sim", "N√£o"])
alimentos_caloricos = st.radio("Voc√™ consome alimentos cal√≥ricos com frequ√™ncia?", ["Sim", "N√£o"])
vegetais = st.slider("Com que frequ√™ncia consome vegetais nas refei√ß√µes? (0 = nunca, 3 = sempre)", 0.0, 3.0, 2.0)
refeicoes_dia = st.slider("Quantas refei√ß√µes principais faz por dia?", 1.0, 5.0, 3.0)
lanches = st.selectbox("Voc√™ costuma comer entre as refei√ß√µes?", ["N√£o", "√Äs vezes", "Frequentemente", "Sempre"])
agua = st.slider("Quantos litros de √°gua voc√™ bebe por dia?", 0.0, 3.0, 2.0)
controla_calorias = st.radio("Voc√™ controla a ingest√£o cal√≥rica?", ["Sim", "N√£o"])
atividade_fisica = st.slider("Horas de atividade f√≠sica por semana:", 0.0, 5.0, 1.0)
tempo_tela = st.slider("Horas de uso de telas por dia (celular, TV, computador)", 0.0, 5.0, 2.0)
transporte = st.selectbox("Meio de transporte mais utilizado:", ["Transporte p√∫blico", "A p√©", "Carro", "Moto", "Bicicleta"])
diabetes = st.radio("Voc√™ j√° foi diagnosticado(a) com diabetes?", ["Sim", "N√£o"])
pressao = st.radio("Voc√™ tem press√£o alta diagnosticada?", ["Sim", "N√£o"])
depressao = st.radio("Voc√™ tem sentido pouco interesse ou prazer nas coisas ultimamente?", ["Sim", "N√£o"])
alcool = st.selectbox("Com que frequ√™ncia voc√™ consome bebida alco√≥lica?", ["N√£o", "√Äs vezes", "Frequentemente", "Sempre"])
fuma = st.radio("Voc√™ fuma atualmente?", ["Sim", "N√£o"])

# Montar dicion√°rio de entrada
input_dict = {
    "Age": idade,
    "Height": altura,
    "Weight": peso,
    "FCVC": vegetais,
    "NCP": refeicoes_dia,
    "CH2O": agua,
    "FAF": atividade_fisica,
    "TUE": tempo_tela,
    "Gender_Female": 1 if genero == "Feminino" else 0,
    "Gender_Male": 1 if genero == "Masculino" else 0,
    "family_history_yes": 1 if historico_familiar == "Sim" else 0,
    "family_history_no": 1 if historico_familiar == "N√£o" else 0,
    "FAVC_yes": 1 if alimentos_caloricos == "Sim" else 0,
    "FAVC_no": 1 if alimentos_caloricos == "N√£o" else 0,
    "CAEC_no": 1 if lanches == "N√£o" else 0,
    "CAEC_Sometimes": 1 if lanches == "√Äs vezes" else 0,
    "CAEC_Frequently": 1 if lanches == "Frequentemente" else 0,
    "CAEC_Always": 1 if lanches == "Sempre" else 0,
    "SCC_yes": 1 if controla_calorias == "Sim" else 0,
    "SCC_no": 1 if controla_calorias == "N√£o" else 0,
    "MTRANS_Public_Transportation": 1 if transporte == "Transporte p√∫blico" else 0,
    "MTRANS_Walking": 1 if transporte == "A p√©" else 0,
    "MTRANS_Automobile": 1 if transporte == "Carro" else 0,
    "MTRANS_Motorbike": 1 if transporte == "Moto" else 0,
    "MTRANS_Bike": 1 if transporte == "Bicicleta" else 0,
    "DIQ010": 1.0 if diabetes == "Sim" else 0.0,
    "MCQ160K": 1.0 if pressao == "Sim" else 0.0,
    "DPQ010": 1.0 if depressao == "Sim" else 0.0,
    "ALQ130": 0 if alcool == "N√£o" else 1 if alcool == "√Äs vezes" else 2 if alcool == "Frequentemente" else 3,
    "SMQ020": 1.0 if fuma == "Sim" else 0.0
}

# Criar DataFrame e alinhar com colunas do treino
input_df = pd.DataFrame([input_dict])
input_df = input_df.reindex(columns=feature_columns, fill_value=0)
input_scaled = scaler.transform(input_df)

# Fun√ß√£o explicativa
def gerar_explicacao():
    riscos = []
    if vegetais < 1.0:
        riscos.append("- Baixo consumo de vegetais")
    if alimentos_caloricos == "Sim":
        riscos.append("- Consumo frequente de alimentos cal√≥ricos")
    if historico_familiar == "Sim":
        riscos.append("- Hist√≥rico familiar de obesidade")
    if atividade_fisica < 1.0:
        riscos.append("- N√≠vel de atividade f√≠sica muito baixo")
    if alcool in ["Frequentemente", "Sempre"]:
        riscos.append("- Consumo elevado de bebidas alco√≥licas")
    if fuma == "Sim":
        riscos.append("- Voc√™ fuma atualmente")
    if depressao == "Sim":
        riscos.append("- Ind√≠cio de desmotiva√ß√£o/depress√£o")
    if diabetes == "Sim":
        riscos.append("- Diabetes diagnosticado")
    if pressao == "Sim":
        riscos.append("- Press√£o alta diagnosticada")
    return "Nenhum fator de risco relevante identificado." if not riscos else "\n".join(riscos)

# Bot√£o de previs√£o
if st.button("üîç Prever n√≠vel de obesidade"):
    pred = modelo.predict(input_scaled)
    resultado = label_encoder.inverse_transform(pred)[0]
    st.session_state.resultado = resultado
    st.session_state.resultado_exibido = True

# Exibi√ß√£o do resultado se houver
if st.session_state.resultado_exibido:
    st.success(f"‚úÖ Resultado previsto: **{st.session_state.resultado.replace('_', ' ')}**")
    st.markdown("#### üß† Fatores de risco detectados:")
    st.markdown(f"```\n{gerar_explicacao()}\n```")
    st.button("üîÅ Fazer nova previs√£o", on_click=lambda: st.session_state.update({"resultado_exibido": False}))
